1
00:00:00,000 --> 00:00:04,056
大家吼！我是Cherno！欢迎回到我的C++系列

2
00:00:04,056 --> 00:00:07,041
今天我们讲循环

3
00:00:07,041 --> 00:00:11,049
这里讲的循环是for循环和while循环

4
00:00:11,049 --> 00:00:18,056
简单来讲，循环就是多次执行同样的代码

5
00:00:18,056 --> 00:00:23,080
举个例子，我们怎么打印hello world五次？

6
00:00:23,080 --> 00:00:33,016
我们可以把那行代码复制5次，或者写个函数调用5次

7
00:00:33,016 --> 00:00:39,092
这么做有点蠢吧？其实可以写循环重复执行代码5次

8
00:00:39,092 --> 00:00:44,046
循环在大项目中也很有用，比如游戏

9
00:00:44,046 --> 00:00:48,041
写游戏的话，要让游戏持续运行，对吧？

10
00:00:48,041 --> 00:00:52,028
你不想渲染一帧就退出游戏，对吧？

11
00:00:52,028 --> 00:00:56,054
结束了，渲染了一帧就游戏结束了

12
00:00:56,054 --> 00:01:00,008
奇怪吧？所以你会想要游戏持续运行

13
00:01:00,008 --> 00:01:02,080
这样你就要用游戏循环

14
00:01:02,080 --> 00:01:11,004
游戏循环其实就是说，当游戏还在运行，玩家还没退出

15
00:01:11,004 --> 00:01:17,053
持续刷新游戏，渲染画面，移动角色以及其他的事

16
00:01:17,053 --> 00:01:19,074
一遍遍，一帧帧的重复

17
00:01:19,074 --> 00:01:23,053
所以循环很重要，每个程序里都有

18
00:01:23,053 --> 00:01:27,089
就跟12P里面的条件语句一样重要

19
00:01:27,089 --> 00:01:37,033
掌握它！因为你写起代码和程序来主要就靠它

20
00:01:37,033 --> 00:01:39,013
先从for循环讲起

21
00:01:39,013 --> 00:01:42,008
前面举了打印Hello World5次的例子

22
00:01:42,008 --> 00:01:46,059
我们是可以复制，然后调用log函数5次

23
00:01:46,059 --> 00:01:51,082
运行一下，的确是在命令行里打印了5次

24
00:01:51,082 --> 00:01:55,080
人生苦短，我用for循环

25
00:01:55,080 --> 00:01:57,080
for循环以关键字for开始

26
00:01:57,080 --> 00:02:00,082
后面跟着的括号里有三部分

27
00:02:00,082 --> 00:02:03,096
每部分以英文分号;隔开

28
00:02:03,096 --> 00:02:06,028
第一部分是一个变量声明

29
00:02:06,028 --> 00:02:08,090
一般会在这里声明临时变量

30
00:02:08,090 --> 00:02:11,041
这里声明一个int类型的变量i等于0

31
00:02:11,041 --> 00:02:14,056
变量名为i是传统了

32
00:02:14,056 --> 00:02:19,008
有说法是i代表迭代器(iterator)，因为i标志了迭代

33
00:02:19,008 --> 00:02:24,067
其实变量名无所谓，甚至不用是int，也不用的等于0

34
00:02:24,067 --> 00:02:29,031
我先写个简单的for循环，然后再细细的讲

35
00:02:29,031 --> 00:02:34,014
for循环很灵活，可以做很多事情

36
00:02:34,014 --> 00:02:35,082
第二部分是条件

37
00:02:35,082 --> 00:02:41,094
满足条件的时候，一直执行for循环里的代码

38
00:02:41,094 --> 00:02:48,072
这里我们想执行log()打印5次

39
00:02:48,072 --> 00:02:53,034
所以写i<5，等下解释意思

40
00:02:53,034 --> 00:02:59,045
第三部分是下一次for循环前会执行的代码

41
00:02:59,045 --> 00:03:02,027
这里输入i++

42
00:03:02,027 --> 00:03:07,063
或者i+=1或者i=i+1都一样

43
00:03:07,063 --> 00:03:18,067
意思是从前面赋予的0开始，i每次循环加1

44
00:03:18,067 --> 00:03:20,048
底下当然是循环体了

45
00:03:20,048 --> 00:03:26,016
循环体里就是for循环会重复执行的代码

46
00:03:26,016 --> 00:03:28,081
这里的代码会多次执行

47
00:03:28,081 --> 00:03:34,054
虽说多次，但是是由条件决定的，可能根本不执行

48
00:03:34,054 --> 00:03:37,028
可能是1次，可能是100次

49
00:03:37,028 --> 00:03:38,092
次数是由条件决定的

50
00:03:38,092 --> 00:03:42,013
贴一个log函数的调用进去

51
00:03:42,013 --> 00:03:44,054
然后删掉外面多余的

52
00:03:44,054 --> 00:03:47,060
按F5执行，可以看到结果是一样的

53
00:03:47,060 --> 00:03:49,026
Hello World出现5次

54
00:03:49,026 --> 00:03:51,022
好，我们来细讲

55
00:03:51,022 --> 00:03:57,000
这个声明是for这行第一个被执行的

56
00:03:57,000 --> 00:04:00,027
执行到这行，就会运行声明部分里的代码

57
00:04:00,027 --> 00:04:02,085
所以这里我们会创造一个变量i

58
00:04:02,085 --> 00:04:07,013
下一步是检查条件是否为真

59
00:04:07,013 --> 00:04:13,016
假如条件为真，就跳进循环体，执行里面的代码

60
00:04:13,016 --> 00:04:17,072
当运行到右大括号}的时候

61
00:04:17,072 --> 00:04:23,071
就会回到上面，执行第三部分，这里i会增加1

62
00:04:23,071 --> 00:04:28,011
然后会跳到第二部分，检查条件是否为真

63
00:04:28,011 --> 00:04:31,094
这里i原来是0，加了1之后是1

64
00:04:31,094 --> 00:04:33,098
所以这里是检查1<5

65
00:04:33,098 --> 00:04:37,060
1<5为真，所以会继续执行循环体里面的代码

66
00:04:37,060 --> 00:04:46,069
这个循环直到i等于4，然后在第三部分加1变成5

67
00:04:46,069 --> 00:04:52,002
接着检查5<5，结果为假，因为5等于5，不小于5

68
00:04:52,002 --> 00:04:55,077
所以条件为假，结束循环，跳到第10行

69
00:04:55,077 --> 00:04:57,028
执行std::cin.get()

70
00:04:57,028 --> 00:05:00,099
以上就是for循环执行5次的

71
00:05:00,099 --> 00:05:05,060
强调一下，for循环的三部分

72
00:05:05,060 --> 00:05:12,035
就是我说的那样，第一部分在for循环之前执行一次

73
00:05:12,035 --> 00:05:19,085
第二部分是一个比较或布尔值，执行每一次循环前会检验

74
00:05:19,085 --> 00:05:26,082
第三部分是每次循环结束后执行的代码

75
00:05:26,082 --> 00:05:32,062
其实我们可以拆分开来，把声明放在for前

76
00:05:32,062 --> 00:05:36,068
然后空着第一部分，这样也绝对没问题

77
00:05:36,068 --> 00:05:42,068
把第三部分放在循环体的最后，结果也会一样

78
00:05:42,068 --> 00:05:45,010
这看起来奇怪，但运行起来

79
00:05:45,010 --> 00:05:49,081
可以看到结果一样，因为代码做的事是一样的

80
00:05:49,081 --> 00:05:51,039
只是我们移动了代码的位置而已

81
00:05:51,039 --> 00:05:56,027
同样的，我们可以在前面声明一个布尔变量，赋值为真

82
00:05:56,027 --> 00:06:00,041
以它作为我的第二部分

83
00:06:00,041 --> 00:06:04,035
然后在i++下面加个if

84
00:06:04,035 --> 00:06:11,044
假如i不小于5，condition就等于假

85
00:06:11,044 --> 00:06:18,003
运行看一下，结果也是一样的，因为代码做的事没变

86
00:06:18,003 --> 00:06:20,048
只是写的代码不一样了

87
00:06:20,048 --> 00:06:24,053
这就告诉我们for循环可以很灵活

88
00:06:24,053 --> 00:06:28,070
不必拘泥于for(int i=0;i<5;i++)

89
00:06:28,070 --> 00:06:31,072
for循环里可以是任何东西

90
00:06:31,072 --> 00:06:35,033
你甚至可以在for循环的三部分里面调用函数

91
00:06:35,033 --> 00:06:38,036
发挥你的想象力吧

92
00:06:38,036 --> 00:06:42,042
你还可以把第二部分去掉，就跟写真(true)的结果一样

93
00:06:42,042 --> 00:06:49,048
这个循环就变成了死循环，永不结束

94
00:06:49,048 --> 00:06:51,056
假如运行的话就可以看到

95
00:06:51,056 --> 00:06:57,008
程序会一直输出Hello World直到我们手动结束

96
00:06:57,008 --> 00:06:58,043
for循环差不多就这样

97
00:06:58,043 --> 00:07:05,068
它可以很方便地多次执行代码，比如打印Hello World5次

98
00:07:05,068 --> 00:07:08,011
做起来很简单

99
00:07:08,011 --> 00:07:15,040
它在遍历数组的时候也很有用，可以一个个地看过去

100
00:07:15,040 --> 00:07:18,010
现在来讲while循环

101
00:07:18,010 --> 00:07:20,052
while循环和for循环挺像的

102
00:07:20,052 --> 00:07:24,091
没有开头第一部分的声明和结尾第三部分的代码

103
00:07:24,091 --> 00:07:26,016
它只有第二部分的条件

104
00:07:26,016 --> 00:07:31,086
所以写while循环先写关键字while，然后加上条件

105
00:07:31,086 --> 00:07:34,084
比如i<5

106
00:07:34,084 --> 00:07:37,073
当然，i在前面声明了

107
00:07:37,073 --> 00:07:43,060
运行的时候，只要i<5就会不断重复执行循环体

108
00:07:43,060 --> 00:07:46,003
假如我们像写刚刚的for循环

109
00:07:46,003 --> 00:07:49,007
先让我还原一下for循环

110
00:07:49,007 --> 00:07:52,083
想跟for循环一样的效果

111
00:07:52,083 --> 00:07:56,097
我们先要在外面声明int i=0

112
00:07:56,097 --> 00:08:01,036
然后在循环结尾执行i++

113
00:08:01,036 --> 00:08:04,065
现在这两就一样了

114
00:08:04,065 --> 00:08:10,054
这两个循环之间我打印一些等号做分割线

115
00:08:10,054 --> 00:08:16,022
可以看到两个循环运行的结果都是打印Hello World5次

116
00:08:16,022 --> 00:08:21,052
那什么时候用for什么时候用while

117
00:08:21,052 --> 00:08:24,088
主要取决于是否需要新变量

118
00:08:24,088 --> 00:08:28,036
因为这两一模一样，可以互换

119
00:08:28,036 --> 00:08:34,056
选择那个其实更看个人风格

120
00:08:34,056 --> 00:08:41,086
因为这两一模一样，做的事也一样

121
00:08:41,086 --> 00:08:48,009
但经验上来讲，假如你已经有用来检验的布尔值

122
00:08:48,009 --> 00:08:52,066
像之前讲的游戏循环里就会有个布尔值表示运行

123
00:08:52,066 --> 00:08:57,016
然后在那个值为真的时候，游戏循环会一直继续

124
00:08:57,016 --> 00:09:00,090
因为布尔值运行 为真说明你想继续运行

125
00:09:00,090 --> 00:09:07,066
我会选while，因为只要条件而不用每次循环都改变条件

126
00:09:07,066 --> 00:09:10,006
循环前不用声明变量

127
00:09:10,006 --> 00:09:13,031
因为条件布尔值已经声明好了

128
00:09:13,031 --> 00:09:21,033
while就好了，因为不用之前声明变量或每次更新值

129
00:09:21,033 --> 00:09:23,033
而遍历数组的时候

130
00:09:23,033 --> 00:09:27,056
数组大小确定，比如10

131
00:09:27,056 --> 00:09:32,003
我会选for，因为一样的代码跑10遍的时候

132
00:09:32,003 --> 00:09:36,001
在这10遍中我要有变量

133
00:09:36,001 --> 00:09:41,004
这个变量在访问数组的时候有用

134
00:09:41,004 --> 00:09:44,032
在操作10个元素的数组时

135
00:09:44,032 --> 00:09:50,070
访问里面每个元素的时候要有偏移量或者索引

136
00:09:50,070 --> 00:09:52,070
我们之后会讲数组

137
00:09:52,070 --> 00:10:01,012
但那个i在循环中从0变成5，正好可以用作索引

138
00:10:01,012 --> 00:10:05,088
这里有for和while循环了，其实还有do...while循环

139
00:10:05,088 --> 00:10:07,057
do...while不太有用

140
00:10:07,057 --> 00:10:10,049
我不太常用

141
00:10:10,049 --> 00:10:13,020
但是有do...while的

142
00:10:13,020 --> 00:10:18,027
尽管它不像for和while循环那么常见

143
00:10:18,027 --> 00:10:20,027
我们先写关键字do

144
00:10:20,027 --> 00:10:21,044
然后是循环体

145
00:10:21,044 --> 00:10:24,074
最后是while和条件

146
00:10:24,074 --> 00:10:27,038
比如像i<5

147
00:10:27,038 --> 00:10:31,002
do...while和while之前的区别是

148
00:10:31,002 --> 00:10:35,000
do...while的循环至少会被执行一次

149
00:10:35,000 --> 00:10:39,017
比如我们把这个int i改下

150
00:10:39,017 --> 00:10:41,081
改成一个条件布尔值

151
00:10:41,081 --> 00:10:43,081
赋值为假

152
00:10:43,081 --> 00:10:46,008
假如把它放到while里

153
00:10:46,008 --> 00:10:50,043
这个while其实就跟if很像了

154
00:10:50,043 --> 00:10:53,000
本质上说，假如这是假

155
00:10:53,000 --> 00:10:55,057
循环体里面就永远不会被执行

156
00:10:55,057 --> 00:11:01,034
而do..while即使条件为假

157
00:11:01,040 --> 00:11:04,035
也会先运行一下里面的代码，而不是跟循环一样跳过

158
00:11:04,035 --> 00:11:07,050
然后运行到最后while的条件，发现为假

159
00:11:07,050 --> 00:11:08,070
循环结束

160
00:11:08,070 --> 00:11:11,015
唔呣，do...while就这样

161
00:11:11,015 --> 00:11:12,093
今天的视频就这样

162
00:11:12,093 --> 00:11:15,020
希望你们听循环听地尽兴

163
00:11:15,020 --> 00:11:17,061
这个系列里面会经常用到循环

164
00:11:17,061 --> 00:11:21,025
基本上你能想到的算法里面都会有它

165
00:11:21,025 --> 00:11:24,003
碰上数组也会有它

166
00:11:24,003 --> 00:11:27,044
我们也会讲用for循环遍历数组

167
00:11:27,044 --> 00:11:29,044
这样我们写起来就很优雅

168
00:11:29,044 --> 00:11:34,099
之后可能会从汇编语言看循环

169
00:11:34,099 --> 00:11:39,031
看看循环生成的cpu指令

170
00:11:39,031 --> 00:11:41,031
这个视频就这样简单点

171
00:11:41,031 --> 00:11:46,006
之后的视频会附上链接（2020/2/15估计在做了哈哈哈）

